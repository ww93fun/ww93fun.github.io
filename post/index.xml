<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Wei's Note</title><link>https://blog.ww93.fun/post/</link><description>Recent content in Posts on Wei's Note</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 19 Mar 2025 20:00:00 +0800</lastBuildDate><atom:link href="https://blog.ww93.fun/post/index.xml" rel="self" type="application/rss+xml"/><item><title>yage.ai 博客分享</title><link>https://blog.ww93.fun/post/yage-ai-blog-post-sharing/</link><pubDate>Wed, 19 Mar 2025 20:00:00 +0800</pubDate><guid>https://blog.ww93.fun/post/yage-ai-blog-post-sharing/</guid><description>&lt;p>主要分享下 &lt;a href="https://yage.ai/claude-code.html">被低估的Claude Code：AI Native软件开发的关键拼图&lt;/a> 这篇文章&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>AI 友好的开发模式：&lt;/strong> AI-Friendly 或 AI-Native 强调软件开发的交付物不仅针对人类，也针对 AI，包含针对 AI 的 prompt 文件，以便 AI 快速上手。&lt;/p>
&lt;ul>
&lt;li>就像 &lt;a href="https://yage.ai/why-forget-all-frameworks.html">为什么学习Agentic AI的第一步是忘记所有框架？&lt;/a> 这篇文章提到的一样，LangGraph、Autogen 这样框架并没有对 AI 或 AI IDE 友好，对于人还是有一定的学习成本，不能够让 AI 一键生成一个可以运行 demo project。&lt;/li>
&lt;li>类似于 robots.txt 对搜索引擎的优化，llms.txt 能够提供信息来帮助 LLMs 在推理时更好的使用网站，例如 &lt;a href="https://docs.stripe.com/llms.txt">stripe docs&lt;/a>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Library as a Service (LaaS)：&lt;/strong> 软件库的交付物不是代码和文档，而是一种服务 API，重构了软件开发的价值链。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://21st.dev/">21st.dev&lt;/a> 本身是个 UI 组建库网站，但他提供了一个 &lt;a href="https://github.com/21st-dev/magic-mcp">magic mcp&lt;/a> 的服务，可以通过描述所需内容来创建 UI 组件。&lt;a href="https://21st.dev/magic">工作原理&lt;/a>：根据描述 在 21st.dev 库中搜索相关组件。利用 RAG 技术，它找到最匹配的前 3 个组件，并从中汲取灵感来创建新的、独特的组件。IDE agent 理解应用程序上下文，并无缝地将新组件集成到正确的位置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://yage.ai">https://yage.ai&lt;/a> 还有挺多文章都挺有应用价值的，例如&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://yage.ai/why-forget-all-frameworks.html">为什么学习Agentic AI的第一步是忘记所有框架？&lt;/a> 跟 &lt;a href="https://www.anthropic.com/engineering/building-effective-agents">Building effective agents&lt;/a> 讲述的一样的观点，但是论据更加充分，现阶段 GenAI 还在快速发展中，没必要引入的 agent 框架，因为不同 agent 框架代表不同的 &amp;quot; 世界观 &amp;ldquo;，都引入了比较复杂的抽象，这个抽象可能并不适合未来的 AI。&lt;/p></description></item><item><title>2023</title><link>https://blog.ww93.fun/post/2023/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0800</pubDate><guid>https://blog.ww93.fun/post/2023/</guid><description>&lt;p>年度关键词：阅读、记录、播客、投资、宏观认知&lt;/p>
&lt;h2 id="阅读">阅读&lt;/h2>
&lt;ul>
&lt;li>今年最值得肯定的是阅读习惯的培养，认认真真开始阅读的一年，非常感谢 Boox Leaf 2 和微信读书帮我营造了读书的氛围。彻底进入的电纸书的世界，还卖掉了很多买来基本没动的纸质书，断舍离。&lt;/li>
&lt;li>年度图书应该是 [[Tiny Habits|福格行为模型]]，也是我大学毕业之后，完整读完的第一本书，关于习惯培养类型的书应该有很多，读完以后虽然并不会让你立马改变自己，或因此而培养出很好的习惯，但至少可以认清自己与了解自己，了解为什么之前数次信誓旦旦的要改变自己，而最终没有实现，关于全书的核心应该是习惯养成那个公示，习惯 = 能力 + 动机 + 提示。&lt;/li>
&lt;li>利用微信读书看或听了一些社科类的书，比如《人类简史》《枪炮、病菌与钢铁》《众神的样子》等，更多去了解人类历史，明年也会读更多此类的书，提升认知，理解世界的运作，论证草台班子理论。&lt;/li>
&lt;li>专业的书也不会落下，[[OSTEP|操作系统导论]] 、[[DDIA]] 收获最大，看的时候有种融会贯通的感觉，但其实很多东西其实看完就忘，还是需要在实践中得真知。&lt;/li>
&lt;li>感谢 [[Immersive Translate]] 这类工具，帮助我脱离茧中圈，能够快读一些英文文章，archive 也是另外一个神器。&lt;/li>
&lt;/ul>
&lt;h2 id="记录">记录&lt;/h2>
&lt;ul>
&lt;li>通过 Obsidian 养成了记录的习惯，2023几乎每天在记录一些零碎的东西，随机想法、读的文章、听的播客、看的视频，前两个月的确花了挺多时间折腾目录结构、常用模版、标签设计、各种各样的插件，现在看来还是值得的，花了一段时间磨合之后，终于找到了最适合自己的一套流程，专注于记录、整理、规划，提升自己。&lt;/li>
&lt;li>关于记录这件事，2024需要认真制定月计划、周计划，这很重要，能促使自己不偏离于年初制定的计划，及时纠正不偏离重点。&lt;/li>
&lt;/ul>
&lt;h2 id="ai">AI&lt;/h2>
&lt;ul>
&lt;li>2023全世界的核心关键词应该是 [[ChatGPT]]，叠加了国内大环境的因素，从年初到年中我相信很多人都有像我一样迷茫和恐慌，觉得自己的岗位会被取代，但随着热度逐渐下降，人们也回归理性，拥抱变化，利用好AI帮助自己提高产出效率。ChatGPT + Whisper 增持的应用不断涌现，未来两年配合AI改造已有软件应该是主旋律，也会不断出现令人叹为观止的新创意。&lt;/li>
&lt;li>后半年我在工作业务中也应用了AIGC能力，深切感受到了编程范式的转变，以前不可能用程序规则实现的功能全部变成了可能，在平时编码中可能卡壳的问题在AI配合下也能很快解决。&lt;/li>
&lt;/ul>
&lt;h2 id="折腾">折腾&lt;/h2>
&lt;ul>
&lt;li>本年买到的最满意的产品应该当属 Apple TV，使用体验吊打各类 Android 电视和盒子，物超所值，在 tvOS 17 之前需要配合 openWrt 一起使用，因此也购置了一台 NanoPi R5S，可以当作一个小型 NAS 和 Homelab，搭建一些 Self-Hosted 服务，结合 Web3 我甚至觉得这可能是未来的趋势，毕竟数据掌握在自己的手里。&lt;/li>
&lt;li>买了一个域名，逐渐意识到Cloudflare的强大，Workers、R2等各类产品免费额度便已经足够使用，Tunnels + Homelab 更是绝配。&lt;/li>
&lt;li>全拼切换双拼，切换过程大概只需一周就会形成肌肉记忆，效率上感觉并没有太大的提升，但是理论上应该是快了点。&lt;/li>
&lt;/ul>
&lt;h2 id="播客">播客&lt;/h2>
&lt;ul>
&lt;li>2023的一个小惊喜，养成了通勤听播客的习惯，听到了很多非常优秀的播客，感觉播客用户数在国内未来应该会迎来一个非常不错的增长，商业变现也会更加多元，也会有更多的人参与到播客录制，当然也可能会迎来严格的监管，质量可能会有所下降，但愿不会这样。
&lt;ul>
&lt;li>[[知行小酒馆]]，算是我听播客的起因，感谢有知有行带我进入一个新世界&lt;/li>
&lt;li>[[起朱楼宴宾客]]，各种宏观认知，在与知行小酒馆的串台节目中认识的，每期必听&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2024希望能够开始听一些英文播客，锻炼自己的听力，搭建出一个赛博朋克英语的环境，借助 Whisper 套壳应用对照转录稿精听英语播客。&lt;/li>
&lt;/ul>
&lt;h2 id="投资">投资&lt;/h2>
&lt;ul>
&lt;li>个人投资方面，2020年中牛市匆匆入场马上迎来了2021年春节后无情的收割，经历了两年没有节奏的加仓后，现在几乎没有可以动弹的空间，继续在熊市中知识付费，感谢有知有行和知行小酒馆，不断提升我投资方面的认知，投资方向和目标也渐渐明确。&lt;/li>
&lt;li>家庭方面跟随大趋势提前还贷，去杠杆，减少负债。&lt;/li>
&lt;/ul>
&lt;h2 id="工作">工作&lt;/h2>
&lt;ul>
&lt;li>宏观环境的变化，叠加自身的决策问题，工作也许是2023也许最不能让自己满意的地方了，2024需要多多努力了。&lt;/li>
&lt;/ul></description></item><item><title>我的信息流获取</title><link>https://blog.ww93.fun/post/info/</link><pubDate>Sun, 19 Feb 2023 11:47:53 +0800</pubDate><guid>https://blog.ww93.fun/post/info/</guid><description>&lt;h2 id="微信读书">微信读书&lt;/h2>
&lt;p>自己很长一段都是碎片阅读，这样并不利于系统获取知识，今年开始培养阅读的习惯。另外配合Obsidian的Weread插件，可以将划线和想法备份到Obsidian，方便回顾和作为写作的素材。&lt;/p>
&lt;h2 id="twitter">Twitter&lt;/h2>
&lt;ul>
&lt;li>从微博迁移到Twitter，见识了很多全职开源的大牛，更加的国际化能够获取到一线的而非被二次加工的资讯，技术讨论的氛围也很浓，比如对&lt;a href="https://twitter.com/laike9m/status/1613577690615021569">早期云计算&lt;/a>的讨论就很有趣，且Thread机制能将来龙去脉串在一起，而不是看得一头雾水。&lt;/li>
&lt;li>Twitter的Thread更像是一个微型专栏，总能让你获取到一些醍醐灌顶的信息，比如&lt;a href="https://twitter.com/realliaohaibo/status/1543128685288378368">《福格行为模型》是一本神书&lt;/a>。&lt;/li>
&lt;li>另外Twitter的搜索能搜到各种有用的经验和吐槽😂，效果堪比小红书，且更加的全球化，支持&lt;code>lang:&lt;/code>过滤语言来获取中文圈的评价，比如查找《福格行为模型》书评，能够获取到不同人不同角度的认识和应用。&lt;/li>
&lt;li>不过 &lt;code>为你推荐&lt;/code> 这个模块实在是个时间黑洞，只好限制自己只在每周五晚上刷，且最多一个小时，每次使用无痕模式访问，不留下Cookie，践行[[福格行为模型]]，给自己增加下难度。&lt;/li>
&lt;/ul>
&lt;h2 id="rss">RSS&lt;/h2>
&lt;p>这里推荐下&lt;a href="https://docs.rsshub.app/">RSSHub&lt;/a>， 方便关注一些不支持RSS的网站订阅，对说的就是知乎专栏和微信公众号🐶。&lt;/p>
&lt;p>去年年底开始公测的 Readwise Reader，RSS + Read It Later + Highlight + Note 体验非常丝滑，简直就是 all in one 中的典范，要不是 &lt;strong>$7.99/月&lt;/strong> 定价过高，我应该会一直使用下去，无奈之下RSS迁移回inoreader，并找到了标注和稍后读的开源替代品omnivore。&lt;/p>
&lt;h3 id="readwise-reader">Readwise Reader&lt;/h3>
&lt;ul>
&lt;li>高亮&amp;amp;笔记
&lt;ul>
&lt;li>之前文章阅读只是脑子里留下印象，但大脑是不靠谱的，且基本都是一目十行（长期阅读网络文章的习惯），没有留下任何痕迹，高亮和笔记功能会促使我更加认真读高价值的文章。&lt;/li>
&lt;li>Reader比较舒服的地方在于可以直接在原网页进行标注&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>document note，记录想读或被推荐的理由，很多保存的文章我们过一段时间再去看，会忘记当初为什么保存&lt;/li>
&lt;li>youtube subtitle，视频字幕生成文本，方便刷公开课记笔记&lt;/li>
&lt;/ul>
&lt;h3 id="omniover">Omniover&lt;/h3>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>开源&lt;/li>
&lt;li>标注功能基本满足&lt;/li>
&lt;li>支持保存Twitter thread&lt;/li>
&lt;li>原文和标注导出到Obsidian&lt;/li>
&lt;/ul>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>必须进入Omniover页面标记，跟Reader相比，不能在原页面进行操作，但也不是不能用😄&lt;/li>
&lt;li>Save page会受到Chrome插件对页面样式修改的影响&lt;/li>
&lt;li>目前提供的网站不知道稳定性如何，会不会存在丢失数据，希望稳定最好能够自部署和备份&lt;/li>
&lt;/ul>
&lt;h2 id="telegram-channel">Telegram Channel&lt;/h2>
&lt;p>订阅了一些大牛的channel，聚合了他们在网络上的行踪，如Twitter点赞&amp;amp;更新、博客更新、豆瓣动态等&lt;/p>
&lt;h2 id="podcast--有声书">Podcast &amp;amp; 有声书&lt;/h2>
&lt;ul>
&lt;li>寻找自己感兴趣的访谈，比如最近在阅读《福格行为模型》，刻意去搜索作者BJ Fogg的相关访谈来练习英语听力，国内环境下推荐使用Spotify来订阅Podcasts&lt;/li>
&lt;li>利用起通勤时的无聊时光，收听一些信息密度低的有声书，最好是不同领域的，来刷新自己的认知&lt;/li>
&lt;/ul>
&lt;h2 id="其他">其他&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.buzzing.cc/">buzzing&lt;/a> 很棒的新闻聚合，主动获取国际资讯，以不同的角度看世界&lt;/li>
&lt;li>英文文章配合 &lt;a href="https://chrome.google.com/webstore/detail/immersive-translate/bpoadfkcbjbfhfodiogcnhhhpibjhbnh">immersive-translate&lt;/a> 双语对照加速阅读&lt;/li>
&lt;li>大部分知识分享类视频信息密度都比较低，且干扰众多，但非常推荐宝藏博主&lt;a href="https://www.youtube.com/c/MoneyXYZ">MoneyXYZ&lt;/a>，每一期都是精心整理，每一期都能让我Get到新认知，尤其早起、Podcast、读书那三期对我有很大的启发&lt;/li>
&lt;li>逐渐降低微信公众号权重，只用来接收一些官方公告和一些主题资讯，比如少数派等，关注下家庭组网和智能家居&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://catcoding.me/p/get-better-info/">优化自己的信息源&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://reorx.com/blog/sharing-my-footprints-automation/">使用自动化工作流聚合信息摄入和输出&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Obsidian不仅仅是一款笔记软件</title><link>https://blog.ww93.fun/post/obsidian/</link><pubDate>Fri, 17 Feb 2023 20:47:00 +0800</pubDate><guid>https://blog.ww93.fun/post/obsidian/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在使用Obsidian之前，我长时间使用Notion作为自己的主力笔记软件，Notion足够优秀，但是服务一旦挂掉，我们的笔记就会无法访问，当然Notion一年可用时间应该有99.999%，但是不怕一万就怕&amp;hellip;，另外Notion &lt;strong>云端存储&lt;/strong>，不能离线阅读，但现在离线的场景其实也基本没有🐶，所以离线也只是个伪需求，除非在信号差的地方。最近Web3这个概念火起来了，其中一个特点就是去中心化，追随下时代的潮流。&lt;/p>
&lt;p>Obsidian真的适合喜欢折腾的同学，在Obsdian我仿佛找到当初在大学给Android手机刷Windows Phone的感觉，时间过得真快不再是少年，一颗爱折腾的心仍然不变。或许真的有点喜欢折腾笔记软件，大学毕业设计就是开发了一款Android版的PKM，但是源代码已经找不到了，不然得看下当时写的代码有多少槽点🐶。&lt;/p>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>优势：&lt;/p>
&lt;ul>
&lt;li>文本记录，方便迁移，记录各种metadata&lt;/li>
&lt;li>笔记版的vscode，插件市场丰富，够折腾，满足个性化定制&lt;/li>
&lt;/ul>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>似乎不支持Notion那样子的Block，不方便拖拽&lt;/li>
&lt;/ul>
&lt;h2 id="使用">使用&lt;/h2>
&lt;p>我平时除了使用核心的双链笔记外，还会把他当作个人本地数据库使用，主要利用Markdown metadata记录元数据，Templater方便的复用模版，配合Dataview table汇总输出，当然这些加起来其实就是Notion的database（Obsidian有个类似的插件 DB Folder），而且Notion数据记录形式会更加高效，但是Obsdian可以输出的不仅仅表格，还是可以使Charts和Heatmap等图表形式。&lt;/p>
&lt;p>记录场景：&lt;/p>
&lt;ul>
&lt;li>阅读清单，在读，想读，读过，之前用豆瓣书单&lt;/li>
&lt;li>影视记录，在看，想看，看过&lt;/li>
&lt;li>软件订阅，订阅记录，变更记录&lt;/li>
&lt;li>投资记录，基金，股票，不过这个场景Beancount更合适&lt;/li>
&lt;/ul>
&lt;p>记录意义：&lt;/p>
&lt;ul>
&lt;li>习惯追踪&lt;/li>
&lt;li>输出年度复盘&lt;/li>
&lt;/ul>
&lt;h3 id="同步">同步&lt;/h3>
&lt;p>利用git来支持历史版本，手动push到Github，社区有一个自动定时同步远程仓库的插件，但我觉得没必要，就像自己平时提交代码一样来提交笔记，也可以维护commit message。同时我也会使用iCloud进行多重备份&lt;/p>
&lt;h3 id="移动端">移动端&lt;/h3>
&lt;p>Obsidian有官方移动端，利用iCloud来同步，满足自己的查询需求，移动端本身不方便做复杂的编辑，可以记录一些灵感和想法。&lt;/p>
&lt;p>&lt;a href="https://github.com/chenyukang/obweb">Obweb : Obsidian + Web = Obsdian on Mobile + Flomo&lt;/a> 这里有个开源移动端访问方案，可以做更多定制化&lt;/p>
&lt;h3 id="一些插件">一些插件&lt;/h3>
&lt;ul>
&lt;li>Daily notes，基于这个日记&lt;a href="https://dannb.org/blog/2022/obsidian-daily-note-template/">模版&lt;/a>针对自己做了些改良，现在每天的收获和随机想法都记录在里边&lt;/li>
&lt;li>Dataview，必装插件，像操作数据库一样来维护自己的笔记系统，通过metadata建立索引，自定义查询归纳文档，页面内嵌变量，执行自定义js脚本&lt;/li>
&lt;li>Templater，模版复用、插入变量，比如结合Banners随机生成封面图、emojj icon，笔记颜值瞬间增加不少&lt;/li>
&lt;li>Mind Map，实时预览脑图，整理笔记也变成了一种享受&lt;/li>
&lt;li>Tasks，强大的任务管理，还可以生成周期任务&lt;/li>
&lt;li>Calendar，配合Daily Note使用，可以以日历的形式显示某天的TODO是否完成&lt;/li>
&lt;li>Omnivore，文章可以按天归档，导出文章、高亮和笔记，一款开源ReadItLater软件，作为Readwise Reader的替代品&lt;/li>
&lt;li>Weread，同步微信读书中书籍元信息、划线和想法&lt;/li>
&lt;li>QuickAdd，快速添加，支持加载js脚本，比如调用API拉取电影metadata，和Templater多少有点重合，感觉还是Templater用起来更舒服一点&lt;/li>
&lt;li>Periodic Note，周期记录，方便记录周报、月报、年报&lt;/li>
&lt;li>Annotator，PDF, EPUB 高亮标注、跳转&lt;/li>
&lt;/ul>
&lt;h3 id="tips">Tips&lt;/h3>
&lt;ul>
&lt;li>文件名以英文或数字开头， &lt;code>Command + O&lt;/code> 方便快速打开和检索，不用切换输入法&lt;/li>
&lt;li>不要在文件夹的组织上花费过多时间，每日的想法和TODO记录在Daily notes，只有十分明确的笔记主题才去专有页面记录&lt;/li>
&lt;li>尽可能多的去使用双链和标签，使笔记之间产生关联，构建网络，方便回溯&lt;/li>
&lt;li>不要花费过多的时间折腾插件和主题，打造自己舒服的工作流，专注于写作的内容&lt;/li>
&lt;/ul>
&lt;h2 id="新发现">新发现&lt;/h2>
&lt;p>&lt;a href="https://obsidian-plugin-stats.vercel.app/new">obsidian-plugin-stats&lt;/a> new 模块可以看到新的有意思的插件，比如&lt;/p></description></item><item><title>一些命令</title><link>https://blog.ww93.fun/post/some-command/</link><pubDate>Thu, 05 Jan 2023 22:20:34 +0800</pubDate><guid>https://blog.ww93.fun/post/some-command/</guid><description>&lt;h1 id="linux">Linux&lt;/h1>
&lt;h2 id="ssh">ssh&lt;/h2>
&lt;h3 id="ssh会话克隆不用重复输入密码">ssh会话克隆，不用重复输入密码&lt;/h3>
&lt;p>编辑 &lt;code>~/.ssh/config&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Host *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    ControlMaster auto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    ControlPath ~/.ssh/%h-%p-%r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    ControlPersist yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考自 &lt;strong>&lt;a href="https://michaelyou.github.io/2015/05/19/%E8%AE%A9mac%E7%9A%84%E7%BB%88%E7%AB%AF%E5%AE%9E%E7%8E%B0%E5%85%8B%E9%9A%86%E4%BC%9A%E8%AF%9D%E5%8A%9F%E8%83%BD/">让mac的终端实现克隆会话功能&lt;/a>&lt;/strong>&lt;/p>
&lt;h2 id="文件传输">文件传输&lt;/h2>
&lt;h3 id="从服务器上下载文件">从服务器上下载文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>scp root@192.168.2.1:/path/filename /local_path
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="上传本地文件到服务器">上传本地文件到服务器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>scp /local_path/filename root@192.168.2.1:/path
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="从服务器下载整个目录">从服务器下载整个目录&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>scp -r root@192.168.2.1:/remote_path（远程目录） /local_path
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="上传目录到服务器">上传目录到服务器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>scp  -r /local_path root@192.168.2.1:/remote_path
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="网络">网络&lt;/h2>
&lt;h3 id="获取服务器外网ip">获取服务器外网IP&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl cip.cc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl ip.cip.cc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl ifconfig.io
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="git">Git&lt;/h2>
&lt;h3 id="只下载最新代码">只下载最新代码&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone --depth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> https://github.com/xxx/xxx.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mysql">Mysql&lt;/h2>
&lt;h3 id="执行sql文件">执行sql文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># mysql -u user -h 192.168.2.1 -p&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source /path/x.sql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Gin Learn</title><link>https://blog.ww93.fun/post/gin-learn/</link><pubDate>Sun, 18 Dec 2022 15:48:40 +0800</pubDate><guid>https://blog.ww93.fun/post/gin-learn/</guid><description>&lt;h1 id="概览">概览&lt;/h1>
&lt;h2 id="与spring-mvc对比">与Spring MVC对比&lt;/h2>
&lt;h3 id="controller">@Controller&lt;/h3>
&lt;p>RouterGroup.Group() ，路由分组&lt;/p>
&lt;h3 id="requestmapping">@RequestMapping&lt;/h3>
&lt;p>RouterGroup.GET(), RouterGroup.POST()…&lt;/p>
&lt;h3 id="requestparam">@RequestParam&lt;/h3>
&lt;p>Spring MVC中@RequestParma适用于query, form data , multipart，gin会细分&lt;/p>
&lt;p>Context.Query(), Context.DefaultQuery()&lt;/p>
&lt;p>Context.PostForm(), Context.DefaultPostForm()&lt;/p>
&lt;p>&lt;code>@RequestParam MultiPartFile&lt;/code> ↔ Context.FormFile()&lt;/p>
&lt;h3 id="pathvariable">@PathVariable&lt;/h3>
&lt;p>“/url/:param/*action”, Context.Param()&lt;/p>
&lt;h3 id="requestbody">@RequestBody&lt;/h3>
&lt;p>&lt;code>Bind()&lt;/code> 利用content-type和struct tag解析支持url path、header、query、form-data、json、xml等，ShouldBindQuery，ShouldBindJSON&lt;/p>
&lt;p>&lt;code>MustBindWith()&lt;/code> 异常情况下中断请求并返回400&lt;/p>
&lt;p>由于Request.Body只能读取一次，使用&lt;code>ShouldBindBodyWith()&lt;/code> 可以缓存Body，对性能有轻微的影响&lt;/p>
&lt;h3 id="valid-jsr303-or-validated">@Valid JSR303 OR @Validated&lt;/h3>
&lt;p>@Validated相比较JSR303@Valid 增加了分组校验&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Login&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;user&amp;#34; binding:&amp;#34;required&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Password&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;password&amp;#34; binding:&amp;#34;required&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="responsebody">@ResponseBody&lt;/h3>
&lt;p>Context.JSON(), Context.String(), Context.XML(), Context.File()&lt;/p>
&lt;p>静态资源&lt;/p>
&lt;p>&lt;code>RouterGroup.StaticFile()&lt;/code> 返回单个文件&lt;/p>
&lt;p>&lt;code>RouterGroup.Static(&amp;quot;/static&amp;quot;, &amp;quot;/var/www&amp;quot;)&lt;/code> 返回指定目录下文件&lt;/p>
&lt;p>&lt;code>Context.HTML()&lt;/code> HTML模版渲染&lt;/p>
&lt;p>自定义渲染 &lt;code>Contenxt.DataFromReader()&lt;/code> 或者 &lt;code>Contenxt.Render()&lt;/code>&lt;/p>
&lt;h3 id="handlerinterceptor">HandlerInterceptor&lt;/h3>
&lt;p>全局的 Engine.Use() 或者 自定义path的RouterGroup.Use()&lt;/p></description></item><item><title>Go Learn</title><link>https://blog.ww93.fun/post/go-learn/</link><pubDate>Sat, 17 Dec 2022 15:48:40 +0800</pubDate><guid>https://blog.ww93.fun/post/go-learn/</guid><description>&lt;h1 id="数据类型">数据类型&lt;/h1>
&lt;h2 id="array">array&lt;/h2>
&lt;ol>
&lt;li>初始化， &lt;code>b := [2]string{&amp;quot;Penn&amp;quot;, &amp;quot;Teller&amp;quot;}&lt;/code>&lt;/li>
&lt;li>初始化，编译器计算自动计算长度 &lt;code>b := [...]string{&amp;quot;Penn&amp;quot;, &amp;quot;Teller&amp;quot;}&lt;/code>&lt;/li>
&lt;li>数组的赋值是直接拷贝整个数组，变量赋值本质上是一次内存浅拷贝，切片的赋值是拷贝了切片头，字符串的赋值是拷贝了字符串的头部，接口变量的赋值同样是浅拷贝&lt;/li>
&lt;/ol>
&lt;h2 id="string">string&lt;/h2>
&lt;p>&lt;strong>&lt;a href="https://go.dev/blog/strings">Strings, bytes, runes and characters in Go&lt;/a>&lt;/strong>&lt;/p>
&lt;p>等价于一个只读的字节Slice&lt;/p>
&lt;p>len 方法返回的时候字节数，非字符数&lt;/p>
&lt;h3 id="rune">rune&lt;/h3>
&lt;p>int32 4个字节 单括号字面量&lt;/p>
&lt;h1 id="关键字">关键字&lt;/h1>
&lt;h2 id="switch">switch&lt;/h2>
&lt;ul>
&lt;li>不需要break语句&lt;/li>
&lt;li>支持表达式&lt;/li>
&lt;/ul>
&lt;h1 id="容器">容器&lt;/h1>
&lt;h2 id="slice---切片">Slice - 切片&lt;/h2>
&lt;p>&lt;strong>&lt;a href="https://go.dev/blog/slices-intro">Go Slices: usage and internals&lt;/a>&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>初始化， &lt;code>letters := []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;}&lt;/code>&lt;/li>
&lt;li>make初始化， &lt;code>s := make([]byte, 5(leg), 5(cap,可选，不填写默认与长度相同))&lt;/code>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>与Java不同，扩容后返回新Slicce，一定要接收返回值&lt;/li>
&lt;li>nil slice 支持append&lt;/li>
&lt;li>s[x:y] 共享底层数据，小Slice引用大Slice，可能会早成无法被垃圾回收，使用复制去处对大Slice的引用&lt;/li>
&lt;/ul>
&lt;h2 id="map">Map&lt;/h2>
&lt;ol>
&lt;li>初始化 &lt;code>n := map[string]int{&amp;quot;foo&amp;quot;: 1, &amp;quot;bar&amp;quot;: 2}&lt;/code>&lt;/li>
&lt;li>make初始化 &lt;code>m := make(map[string]int)&lt;/code>&lt;/li>
&lt;li>&lt;code>v1 := m[&amp;quot;k1&amp;quot;]&lt;/code>&lt;/li>
&lt;li>&lt;code>v2, ok := m[&amp;quot;k2&amp;quot;]&lt;/code> ok 判断是否存在，主要用于区分零值&lt;/li>
&lt;/ol>
&lt;h2 id="range--迭代器">range -迭代器&lt;/h2>
&lt;ol>
&lt;li>数组 or 切片 &lt;code>for i, num := range nums&lt;/code>&lt;/li>
&lt;li>字典 &lt;code>for k, v := range kvs&lt;/code> &lt;code>for k := range kvs&lt;/code>&lt;/li>
&lt;li>字符串 &lt;code>for offset, runeValue := range &amp;quot;go&amp;quot;&lt;/code>&lt;/li>
&lt;/ol>
&lt;h1 id="struct">Struct&lt;/h1>
&lt;h3 id="参数传递">参数传递&lt;/h3>
&lt;p>Go 语言支持值传递，也支持指针传递。值传递涉及到结构体字段的浅拷贝，指针传递会共享结构体内容，只会拷贝指针地址&lt;/p></description></item><item><title>Hello World</title><link>https://blog.ww93.fun/post/hello-world/</link><pubDate>Sun, 11 Dec 2022 15:50:34 +0800</pubDate><guid>https://blog.ww93.fun/post/hello-world/</guid><description>&lt;h1 id="hello-world">Hello World&lt;/h1></description></item></channel></rss>